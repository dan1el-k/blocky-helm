# Default values for blocky.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

replicaCount: 1

image:
  repository: spx01/blocky
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: [ ]

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }
podLabels: { }

podSecurityContext:
  fsGroup: 100

securityContext:
  runAsNonRoot: true
  runAsUser: 100
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true

service:
  enabled: true
  type: ClusterIP
  # type: LoadBalancer
  externalTrafficPolicy: Cluster
  loadBalancerIP: "10.0.0.2"

env:
  # Optional to synchronize the log timestamp with host
  - name: TZ
    value: "Europe/Vienna"

# See https://0xerr0r.github.io/blocky/v0.23/configuration/ for all available options
config:
  ports:
    dns: 53
    # tls: 853
    # http: 4000
    # https: 443
  upstreams:
    groups:
      default:
        - 1.1.1.1
        - 8.8.8.8
  # redis:
  #   address: blocky-redis-master:6379
  #   required: true
  prometheus:
    enable: false

resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  exec:
    command:
      - /app/blocky
      - healthcheck
readinessProbe:
  exec:
    command:
      - /app/blocky
      - healthcheck

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
#volumes:
#  # Optional to synchronize the log timestamp with host
#  - name: tz-config
#    hostPath:
#      path: /etc/localtime
#      type: File

# Additional volumeMounts on the output Deployment definition.
#volumeMounts:
#  # Optional to synchronize the log timestamp with host
#  - name: tz-config
#    mountPath: /etc/localtime
#    readOnly: true


nodeSelector: { }

tolerations: [ ]

affinity: { }

ui:
  enabled: false
  image:
    repository: ghcr.io/mozart409/blocky-frontend
    pullPolicy: IfNotPresent
    # tag: latest
  livenessProbe:
    httpGet:
      path: /
      port: 8002
  readinessProbe:
    httpGet:
      path: /
      port: 8002
  resources: { }
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  service:
    enabled: true
    type: ClusterIP
    port: 8002
  ingress:
    enabled: false
    className: ""
    annotations: { }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: [ ]
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: false

k8sGateway:
  enabled: true
  name: k8s-gateway
  service:
    port: 5353
    useTcp: true

  image:
    registry: quay.io
    repository: oriedge/k8s_gateway
    tag: v0.4.0
    pullPolicy: IfNotPresent

  # Delegated domain
  domain: ""

  # Labels to apply to all resources
  customLabels: {}

  # TTL for non-apex responses (in seconds)
  ttl: 300

  # Resources (CPU, memory etc)
  resources: {}

  # Limit what kind of resources to watch, e.g. watchedResources: ["Ingress"]
  watchedResources: []

  # Service name of a secondary DNS server (should be `serviceName.namespace`)
  secondary: ""

  # Enabled fallthrough for k8s_gateway
  fallthrough:
    enabled: false
    zones: []

  # Override the default `serviceName.namespace` domain apex
  apex: ""

  # Optional configuration option for DNS01 challenge that will redirect all acme
  # challenge requests to external cloud domain (e.g. managed by cert-manager)
  # See: https://cert-manager.io/docs/configuration/acme/dns01/
  dnsChallenge:
    enabled: false
    domain: dns01.clouddns.com

  # Optional plugins that will be enabled in the zone, e.g. "forward . /etc/resolve.conf"
  extraZonePlugins:
    - name: log
    - name: errors
    # Serves a /health endpoint on :8080, required for livenessProbe
    - name: health
      configBlock: |-
        lameduck 5s
    # Serves a /ready endpoint on :8181, required for readinessProbe
    - name: ready
    # Serves a /metrics endpoint on :9153, required for serviceMonitor
    - name: prometheus
      parameters: 0.0.0.0:9153
    - name: forward
      parameters: . /etc/resolv.conf
    - name: loop
    - name: reload
    - name: loadbalance

  debug:
    enabled: false

  secure: true

  zoneFiles: []
  #    - filename: example.db
  #      # Optional
  #      domains: example.com
  #      contents: |
  #        example.com.   IN SOA sns.dns.icann.com. noc.dns.icann.com. 2015082541 7200 3600 1209600 3600
  #        example.com.   IN NS  b.iana-servers.net.
  #        example.com.   IN NS  a.iana-servers.net.
  #        example.com.   IN A   192.168.99.102
  #        *.example.com. IN A   192.168.99.102